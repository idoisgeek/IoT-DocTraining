#include <SPI.h>
#include <MFRC522.h>
#include <BluetoothSerial.h>

// RFID
#define RST_PIN 22 // Reset pin
#define SS_PIN 5 // Slave Select pin (SDA on RC522)
MFRC522 mfrc522(SS_PIN, RST_PIN);

// Bluetooth
BluetoothSerial SerialBT;

// Tag tracking variables
String currentTagID = "";
String lastSentTagID = "";
unsigned long lastTagTime = 0;
const unsigned long TAG_TIMEOUT = 2000; // 2 seconds timeout to consider tag removed
const unsigned long SEND_INTERVAL = 500; // Send tag ID every 500ms when present

void setup() {
  Serial.begin(115200);
  SerialBT.begin("ESP32_RFID"); // Bluetooth device name
  SPI.begin(); // Start SPI bus
  mfrc522.PCD_Init(); // Init MFRC522
  Serial.println("Place your RFID tag");
  
  if (!SerialBT.hasClient()) {
    Serial.println("Waiting for Bluetooth client to connect...");
  }
}

void loop() {
  String detectedTagID = "";
  
  // Check if a new card is present and can be read
  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    // Get UID as a string
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      detectedTagID += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
      detectedTagID += String(mfrc522.uid.uidByte[i], HEX);
    }
    detectedTagID.toUpperCase();
    
    // Update current tag and timestamp
    currentTagID = detectedTagID;
    lastTagTime = millis();
    
    // Halt PICC to be ready for next read
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
  }
  
  // Check if current tag has timed out (been removed)
  if (currentTagID != "" && (millis() - lastTagTime > TAG_TIMEOUT)) {
    Serial.println("Tag removed: " + currentTagID);
    currentTagID = "";
    lastSentTagID = "";
    // Send empty line to indicate tag removal
    SerialBT.println("");
  }
  
  // Continuously send current tag ID if present
  if (currentTagID != "") {
    // Send tag ID at regular intervals or when tag changes
    if (currentTagID != lastSentTagID || (millis() - lastTagTime) % SEND_INTERVAL < 100) {
      Serial.println("Tag present: " + currentTagID);
      SerialBT.println(currentTagID);
      lastSentTagID = currentTagID;
    }
  }
  
  delay(100); // Small delay to prevent excessive polling
}